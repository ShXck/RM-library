#include "NetworkHandler.h"

Network_Handler::Network_Handler() { }

void Network_Handler::connect_to_main() {
	_socket.disconnect();
	sf::IpAddress _address = sf::IpAddress::getLocalAddress();
	_socket.setBlocking( false );
	_socket.connect( _address, PORT_M );
}

void Network_Handler::connect_to_ha() {
	std::cout << "CONNECTED TO HA" << std::endl;
	_socket.disconnect();
	sf::IpAddress _address = sf::IpAddress::getLocalAddress();
	_socket.setBlocking( false );
	_socket.connect( _address, PORT_HA );
}


void Network_Handler::wait_for_response() {

	sf::Packet _packet;
	std::string _message;
	bool received = false;

	_timer.check_response( &_message );

	while ( !received ) {
		if ( _socket.receive( _packet ) == sf::Socket::Done ) {
			if( _packet >> _message ) {
				_reader.read( _message );
				received = true;
			}
		}
		if( !_timer.is_main_working ) break;
	}

	connect_to_ha();
}

rm::rmRef_h* Network_Handler::get_resource() {
	return ref_container.ref();
}

void Network_Handler::send( std::string message ) {
	sf::Packet _packet;
	_packet << _encrypter.apply(message);
	_socket.send( _packet );
}

void Network_Handler::check_server_status() {
	std::string check_msg = JSON_Handler::build_check_msg();
	send( check_msg );
	wait_for_response();
}


Network_Handler::~Network_Handler() { }

