#ifndef NETWORK_H_NETWORKHANDLER_H_
#define NETWORK_H_NETWORKHANDLER_H_
#define PORT_M 8000
#define PORT_HA 7500
#include <SFML/Network.hpp>
#include <string>
#include <iostream>
#include "../lib_ops/rmRefh.h"
#include "Reader.h"
#include "JSONHandler.h"
#include <thread>
#include <future>
#include "TempRefContainer.h"
#include "Encrypter.h"

struct Response_Timer {

	bool is_main_working

	void check_response( std::string* response ) {

		std::thread( [ response ]( ) {

			while( true ) {

				std::time_t  _start, _end;
				double _elapsed;

				time( &_start );

				do {
					time( &_end );
					_elapsed = difftime( _end, _start );
					if( *response != "" ) break;
				} while( _elapsed < 3 );

				if( *response == "" && _elapsed >= 3 ) {
					break;
				}

				_elapsed = 0.0;
				_start = 0;
				_end = 0;

				*response = "";

				std::cout << "IM STILL RUNNING" << std::endl;
			}

			std::cout << "IM OUT" << std::endl;

		}).detach();
	}
};

class Network_Handler {
public:
	Network_Handler();
	void connect_to_main();
	void connect_to_ha();
	void wait_for_response();
	void send( std::string message );
	void check_server_status();
	rm::rmRef_h* get_resource();
	virtual ~Network_Handler();
private:
	sf::TcpSocket _socket;
	Reader _reader;
	Temp_Ref_Container ref_container;
	Encrypter _encrypter;
};

#endif /* NETWORK_H_NETWORKHANDLER_H_ */
