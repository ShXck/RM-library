#include "NetworkHandler.h"

Network_Handler::Network_Handler() {
}

void Network_Handler::make_connection() {
	sf::IpAddress _address = sf::IpAddress::getLocalAddress();
	_socket.setBlocking( false );
	_socket.connect( _address, PORT );
}

void Network_Handler::send( std::string message ) {
	sf::Packet _packet;
	_packet << message;
	_socket.send( _packet );
}

rm::rmRef_h process_data( const char* data ) {

	const char* data_key = JSON_Handler::get_value( data, "key" ).GetString();
	std::size_t data_size = JSON_Handler::get_value( data, "size" ).GetInt();
	std::string data_value = JSON_Handler::get_value( data, "value" ).GetString();

	void* value_ptr = &data_value;

	rm::rmRef_h new_ref( data_key , value_ptr, data_size );

	return new_ref;
}

rm::rmRef_h Network_Handler::receive() {

	sf::Packet _packet;
	std::string _message;

	if ( _socket.receive( _packet ) == sf::Socket::Done ) {
		if( _packet >> _message ) {
			return process_data( _message.c_str() );
		} else {
			throw std::runtime_error( "The message was not received succesfully" );
		}
	} else {

	}
}

void Network_Handler::check_server_status() {

}

Network_Handler::~Network_Handler() {
	// TODO Auto-generated destructor stub
}

